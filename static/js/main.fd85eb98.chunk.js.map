{"version":3,"sources":["map/Cells.js","map/Rivers.js","map/Routes.js","map/Markers.js","Map.js","index.js"],"names":["Cells","mode","borders","projection","useState","geoData","cells","setCells","cellPaths","setCellPaths","useEffect","console","log","pathGenerator","geoPath","paths","features","map","f","idx","props","properties","type","colorFill","strokeFill","chroma","require","randomColor","format","seed","state","religion","hue","culture","luminosity","province","alpha","biomeColors","biome","domain","scale","height","hex","population","d","fill","fillOpacity","stroke","strokeWidth","className","updateCellPaths","Rivers","riverData","rivers","riverPaths","setRiverPaths","riverSVG","Routes","routeData","routes","routePaths","setroutePaths","routeSVG","geometry","strokeDasharray","Markers","markers","markerPaths","setMarkerPaths","markerSVG","Map","setMode","setBorders","roads","setRoads","setMarkers","geoEquirectangular","translate","ButtonGroup","Button","variant","onClick","viewBox","maxWidth","width","maxHeight","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd85eb98.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { geoMercator, geoPath } from \"d3-geo\";\r\nimport geoData from \"../json/world/cells.json\";\r\nimport randomColor from \"randomcolor\";\r\nimport biomeColors from \"../json/customizables/biomeColors.json\";\r\nexport default function Cells({ mode, borders, projection }) {\r\n  const [cells, setCells] = useState(geoData);\r\n  const [cellPaths, setCellPaths] = useState([]);\r\n\r\n  const updateCellPaths = () => {\r\n    console.log(projection);\r\n    const pathGenerator = geoPath(projection);\r\n    var paths = cells.features.map((f, idx) => {\r\n      var props = f.properties;\r\n      if (props.type === \"ocean\" || props.type === \"lake\") {\r\n        var colorFill = \"#D4F1F9\";\r\n        var strokeFill = \"#D4F1F9\";\r\n      } else {\r\n        var colorFill = \"\";\r\n        var chroma = require(\"chroma-js\");\r\n        switch (mode) {\r\n          case \"cells\":\r\n            colorFill = \"#008013\";\r\n            break;\r\n          case \"nations\":\r\n            colorFill = randomColor({ format: \"hsl\", seed: props.state });\r\n            break;\r\n          case \"religion\":\r\n            colorFill = randomColor({ format: \"hsl\", seed: props.religion });\r\n            break;\r\n          case \"culture\":\r\n            colorFill = randomColor({\r\n              hue: \"red\",\r\n              format: \"hsl\",\r\n              seed: props.culture,\r\n            });\r\n            break;\r\n          case \"province\":\r\n            colorFill = randomColor({\r\n              format: \"hsl\",\r\n              luminosity: \"dark\",\r\n              seed: props.province * 10,\r\n              alpha: 0.99,\r\n              format: \"rgba\",\r\n            });\r\n            break;\r\n          case \"biomes\":\r\n            colorFill = biomeColors[props.biome];\r\n            break;\r\n          case \"height\":\r\n            var domain = [-200, 7000];\r\n            var scale = chroma.scale([\"black\", \"white\"]).domain(domain);\r\n            colorFill = scale(props.height).hex();\r\n            break;\r\n          case \"population\":\r\n            var domain = [0, 30000];\r\n            var scale = chroma.scale([\"white\", \"green\"]).domain(domain);\r\n            colorFill = scale(props.population).hex();\r\n            break;\r\n        }\r\n        if (borders) {\r\n          var strokeFill = \"#111111\";\r\n        } else {\r\n          var strokeFill = colorFill;\r\n        }\r\n      }\r\n\r\n      let path = (\r\n        // <a href={\"/cell/\" + props.id}>\r\n          <path\r\n            key={\"path\" + idx}\r\n            d={pathGenerator(f)}\r\n            fill={colorFill}\r\n            fillOpacity=\"1\"\r\n            stroke={strokeFill}\r\n            strokeWidth=\"1\"\r\n            className=\"states\"\r\n            biome={props.biome}\r\n          />\r\n        ///</a>\r\n      );\r\n      return path;\r\n    });\r\n    setCellPaths(paths);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setCells(geoData);\r\n    updateCellPaths();\r\n  }, [mode, borders]);\r\n\r\n  return <g>{cellPaths}</g>;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport riverData from \"../json/world/rivers.json\";\r\nimport { geoPath } from \"d3-geo\";\r\n\r\nexport default function Rivers({ projection }) {\r\n  const [rivers, setRivers] = useState(riverData);\r\n  const [riverPaths, setRiverPaths] = useState(null);\r\n\r\n  useEffect(() => {\r\n    updateCellPaths();\r\n  }, []);\r\n\r\n  const updateCellPaths = () => {\r\n    const pathGenerator = geoPath(projection);\r\n    console.log();\r\n    var riverSVG = rivers.features.map((f, idx) => {\r\n      //console.log(f);\r\n      let path = (\r\n        <path\r\n          key={\"path\" + idx}\r\n          d={pathGenerator(f)}\r\n          stroke={\"#D4F1F9\"}\r\n          strokeWidth={\"1\"}\r\n          fillOpacity={\"0\"}\r\n        />\r\n      );\r\n      return path;\r\n    });\r\n\r\n    setRiverPaths(riverSVG);\r\n  };\r\n\r\n  return <g>{riverPaths}</g>;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport routeData from \"../json/world/routes.json\";\r\nimport {\r\n  geoPath,\r\n} from \"d3-geo\";\r\n\r\nexport default function Routes({ projection }) {\r\n  const [routes, setroutes] = useState(routeData);\r\n  const [routePaths, setroutePaths] = useState(null);\r\n\r\n  useEffect(() => {\r\n    updateCellPaths();\r\n  }, []);\r\n\r\n  const updateCellPaths = () => {\r\n    const pathGenerator = geoPath(projection);\r\n\r\n    var routeSVG = routes.features.map((f, idx) => {\r\n      if (\r\n        f.properties.type == \"roads\" ||\r\n        f.properties.type == \"trails\" ||\r\n        f.properties.type == \"searoutes\"\r\n      ) {\r\n        let path = (\r\n          <path\r\n            key={\"path\" + idx}\r\n            d={pathGenerator(f.geometry)}\r\n            stroke={f.properties.type == \"searoutes\" ? \"#4994aa\" : \"#592d00\"}\r\n            strokeWidth={f.properties.type == \"roads\" ? \"2\" : \"0.9\"}\r\n            strokeDasharray={f.properties.type == \"roads\" ? \"\" : \"4 1\"}\r\n            fillOpacity={\"0\"}\r\n          />\r\n        );\r\n        return path;\r\n      }\r\n    });\r\n\r\n    setroutePaths(routeSVG);\r\n  };\r\n\r\n  return <g>{routePaths}</g>;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport riverData from \"../json/world/markers.json\";\r\nimport { geoPath } from \"d3-geo\";\r\n\r\nexport default function Markers({ projection }) {\r\n  const [markers, setMarkers] = useState(riverData);\r\n  const [markerPaths, setMarkerPaths] = useState(null);\r\n\r\n  useEffect(() => {\r\n    updateCellPaths();\r\n  }, []);\r\n\r\n  const updateCellPaths = () => {\r\n    const pathGenerator = geoPath(projection);\r\n    console.log();\r\n    var markerSVG = markers.features.map((f, idx) => {\r\n      //console.log(f);\r\n      let path = (\r\n        <path\r\n          key={\"path\" + idx}\r\n          d={pathGenerator(f)}\r\n          stroke={\"#000000\"}\r\n          fill={\"#000000\"}\r\n          strokeWidth={\"1\"}\r\n          fillOpacity={\"1\"}\r\n        />\r\n      );\r\n      return path;\r\n    });\r\n\r\n    setMarkerPaths(markerSVG);\r\n  };\r\n\r\n  return <g>{markerPaths}</g>;\r\n}\r\n","import React, {useEffect, useState} from 'react'\nimport Cells from './map/Cells';\nimport Rivers from './map/Rivers';\nimport Routes from './map/Routes';\nimport Markers from './map/Markers';\nimport { geoMercator, geoEquirectangular, geoIdentity } from 'd3-geo';\n\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport { TransformComponent as TransformComponent, TransformWrapper } from 'react-zoom-pan-pinch';\n\n\nexport default function Map(props) {\n  const [mode, setMode] = useState(\"cells\");\n  const [borders, setBorders] = useState(false);\n  const [roads, setRoads] = useState(false);\n  const [markers, setMarkers] = useState(false)\n  const [projection, setProjection] = useState(()=>geoEquirectangular().scale(870).translate([950, 970]));\n\n  useEffect(()=>{\n  },[ ])\n\n  return (\n    <>\n      <TransformWrapper>\n        <div className=\"buttons\">\n          <ButtonGroup>\n          <Button variant=\"secondary\" onClick={() => setMode(\"cells\")}>Cells</Button>\n          <Button variant=\"secondary\" onClick={() => setMode(\"nations\")}>nations</Button>\n          <Button variant=\"secondary\" onClick={() => setMode(\"religion\")}>religion</Button>\n          <Button variant=\"secondary\" onClick={() => setMode(\"culture\")}>culture</Button>\n          <Button variant=\"secondary\" onClick={() => setMode(\"province\")}>province</Button>\n          <Button variant=\"secondary\" onClick={() => setMode(\"biomes\")}>biomes</Button>\n          <Button variant=\"secondary\" onClick={() => setMode(\"height\")}>height</Button>\n          <Button variant=\"secondary\" onClick={() => setMode(\"population\")}>population</Button>\n          <Button variant=\"secondary\" onClick={() => setBorders(true)}>borders on</Button>\n          <Button variant=\"secondary\" onClick={() => setBorders(false)}>borders off</Button>\n          </ButtonGroup>\n          <br/>\n          <ButtonGroup>\n          <Button onClick={() => setRoads(true)}>roads on</Button>\n          <Button onClick={() => setRoads(false)}>roads off</Button>\n          <Button onClick={() => setMarkers(true)}>markers on</Button>\n          <Button onClick={() => setMarkers(false)}>markers off</Button>\n          </ButtonGroup>\n        </div>\n        <TransformComponent>\n          <svg\n            viewBox=\"0 0 1920 1080\"\n            maxWidth=\"100%\"\n            width=\"auto\"\n            maxHeight=\"100vh\"\n            height=\"auto\"\n          >\n            <Cells mode={mode} borders={borders} projection={projection}/>\n            <Rivers projection={projection}/>\n            {roads ? (\n              <Routes projection={projection}/>\n            ) : (\n              <></>\n            )}\n            {markers? (\n              <Markers projection={projection}/>\n               ) : (\n                <></>\n            )}\n          </svg>\n          </TransformComponent>\n      </TransformWrapper>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Map from './Map';\nimport './css/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Map/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}