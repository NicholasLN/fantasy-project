{"version":3,"sources":["map/Cells.js","map/Rivers.js","map/Routes.js","Map.js","index.js"],"names":["Cells","mode","borders","projection","useState","geoData","cells","setCells","cellPaths","setCellPaths","useEffect","console","log","pathGenerator","geoPath","paths","features","map","f","idx","props","properties","type","colorFill","strokeFill","chroma","require","randomColor","format","seed","state","religion","hue","culture","luminosity","province","alpha","biomeColors","biome","domain","scale","height","hex","population","href","id","d","fill","fillOpacity","stroke","strokeWidth","className","updateCellPaths","Rivers","riverData","rivers","riverPaths","setRiverPaths","riverSVG","Routes","routeData","routes","routePaths","setroutePaths","routeSVG","geometry","strokeDasharray","Map","setMode","setBorders","roads","setRoads","geoMercator","translate","onClick","viewBox","width","style","overflow","margin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5abb1cef.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { geoMercator, geoPath } from \"d3-geo\";\r\nimport geoData from \"../json/world/cells.json\";\r\nimport randomColor from \"randomcolor\";\r\nimport biomeColors from \"../json/customizables/biomeColors.json\";\r\nexport default function Cells({ mode, borders, projection }) {\r\n  const [cells, setCells] = useState(geoData);\r\n  const [cellPaths, setCellPaths] = useState([]);\r\n\r\n  const updateCellPaths = () => {\r\n    console.log(projection);\r\n    const pathGenerator = geoPath(projection);\r\n    var paths = cells.features.map((f, idx) => {\r\n      var props = f.properties;\r\n      if (props.type === \"ocean\" || props.type === \"lake\") {\r\n        var colorFill = \"#D4F1F9\";\r\n        var strokeFill = \"#D4F1F9\";\r\n      } else {\r\n        var colorFill = \"\";\r\n        var chroma = require(\"chroma-js\");\r\n        switch (mode) {\r\n          case \"cells\":\r\n            colorFill = \"#008013\";\r\n            break;\r\n          case \"nations\":\r\n            colorFill = randomColor({ format: \"hsl\", seed: props.state });\r\n            break;\r\n          case \"religion\":\r\n            colorFill = randomColor({ format: \"hsl\", seed: props.religion });\r\n            break;\r\n          case \"culture\":\r\n            colorFill = randomColor({\r\n              hue: \"red\",\r\n              format: \"hsl\",\r\n              seed: props.culture,\r\n            });\r\n            break;\r\n          case \"province\":\r\n            colorFill = randomColor({\r\n              format: \"hsl\",\r\n              luminosity: \"dark\",\r\n              seed: props.province * 10,\r\n              alpha: 0.99,\r\n              format: \"rgba\",\r\n            });\r\n            break;\r\n          case \"biomes\":\r\n            colorFill = biomeColors[props.biome];\r\n            break;\r\n          case \"height\":\r\n            var domain = [-200, 7000];\r\n            var scale = chroma.scale([\"black\", \"white\"]).domain(domain);\r\n            colorFill = scale(props.height).hex();\r\n            break;\r\n          case \"population\":\r\n            var domain = [0, 30000];\r\n            var scale = chroma.scale([\"white\", \"green\"]).domain(domain);\r\n            colorFill = scale(props.population).hex();\r\n            break;\r\n        }\r\n        if (borders) {\r\n          var strokeFill = \"#111111\";\r\n        } else {\r\n          var strokeFill = colorFill;\r\n        }\r\n      }\r\n\r\n      let path = (\r\n        <a href={\"/cell/\" + props.id}>\r\n          <path\r\n            key={\"path\" + idx}\r\n            d={pathGenerator(f)}\r\n            fill={colorFill}\r\n            fillOpacity=\"1\"\r\n            stroke={strokeFill}\r\n            strokeWidth=\"1\"\r\n            className=\"states\"\r\n            biome={props.biome}\r\n          />\r\n        </a>\r\n      );\r\n      return path;\r\n    });\r\n    setCellPaths(paths);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setCells(geoData);\r\n    updateCellPaths();\r\n  }, [mode, borders]);\r\n\r\n  return <g>{cellPaths}</g>;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport riverData from \"../json/world/rivers.json\";\r\nimport { geoPath } from \"d3-geo\";\r\n\r\nexport default function Rivers({ projection }) {\r\n  const [rivers, setRivers] = useState(riverData);\r\n  const [riverPaths, setRiverPaths] = useState(null);\r\n\r\n  useEffect(() => {\r\n    updateCellPaths();\r\n  }, []);\r\n\r\n  const updateCellPaths = () => {\r\n    const pathGenerator = geoPath(projection);\r\n    console.log();\r\n    var riverSVG = rivers.features.map((f, idx) => {\r\n      //console.log(f);\r\n      let path = (\r\n        <path\r\n          key={\"path\" + idx}\r\n          d={pathGenerator(f)}\r\n          stroke={\"#D4F1F9\"}\r\n          strokeWidth={\"1\"}\r\n          fillOpacity={\"0\"}\r\n        />\r\n      );\r\n      return path;\r\n    });\r\n\r\n    setRiverPaths(riverSVG);\r\n  };\r\n\r\n  return <g>{riverPaths}</g>;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport routeData from \"../json/world/routes.json\";\r\nimport {\r\n  geoPath,\r\n} from \"d3-geo\";\r\n\r\nexport default function Routes({ projection }) {\r\n  const [routes, setroutes] = useState(routeData);\r\n  const [routePaths, setroutePaths] = useState(null);\r\n\r\n  useEffect(() => {\r\n    updateCellPaths();\r\n  }, []);\r\n\r\n  const updateCellPaths = () => {\r\n    const pathGenerator = geoPath(projection);\r\n\r\n    var routeSVG = routes.features.map((f, idx) => {\r\n      if (\r\n        f.properties.type == \"roads\" ||\r\n        f.properties.type == \"trails\" ||\r\n        f.properties.type == \"searoutes\"\r\n      ) {\r\n        let path = (\r\n          <path\r\n            key={\"path\" + idx}\r\n            d={pathGenerator(f.geometry)}\r\n            stroke={f.properties.type == \"searoutes\" ? \"#4994aa\" : \"#592d00\"}\r\n            strokeWidth={f.properties.type == \"roads\" ? \"2\" : \"0.9\"}\r\n            strokeDasharray={f.properties.type == \"roads\" ? \"\" : \"4 1\"}\r\n            fillOpacity={\"0\"}\r\n          />\r\n        );\r\n        return path;\r\n      }\r\n    });\r\n\r\n    setroutePaths(routeSVG);\r\n  };\r\n\r\n  return <g>{routePaths}</g>;\r\n}\r\n","import React, {useEffect, useState} from 'react'\nimport Cells from './map/Cells';\nimport Rivers from './map/Rivers';\nimport Routes from './map/Routes';\nimport { geoMercator, geoConicConformal, geoIdentity } from 'd3-geo';\nexport default function Map(props) {\n  const [mode, setMode] = useState(\"cells\");\n  const [borders, setBorders] = useState(false);\n  const [roads, setRoads] = useState(false);\n  const [projection, setProjection] = useState(()=>geoMercator().scale(700).translate([900, 965]));\n\n  useEffect(()=>{\n  },[])\n\n  return (\n    <>\n      <button onClick={() => setMode(\"cells\")}>Cells</button>\n      <button onClick={() => setMode(\"nations\")}>nations</button>\n      <button onClick={() => setMode(\"religion\")}>religion</button>\n      <button onClick={() => setMode(\"culture\")}>culture</button>\n      <button onClick={() => setMode(\"province\")}>province</button>\n      <button onClick={() => setMode(\"biomes\")}>biomes</button>\n      <button onClick={() => setMode(\"height\")}>height</button>\n      <button onClick={() => setMode(\"population\")}>population</button>\n      <button onClick={() => setBorders(true)}>borders on</button>\n      <button onClick={() => setBorders(false)}>borders off</button>\n      <br />\n      <button onClick={() => setRoads(true)}>roads on</button>\n      <button onClick={() => setRoads(false)}>roads off</button>\n\n      <svg\n        viewBox=\"0 0 1920 1080\"\n        width={\"100%\"}\n        height={\"100%\"}\n        style={{ overflow: \"auto\", margin: \"auto\" }}\n      >\n        <Cells mode={mode} borders={borders} projection={projection}/>\n        <Rivers projection={projection}/>\n        {roads ? (\n          <Routes projection={projection}/>\n        ) : (\n          <></>\n        )}\n      </svg>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Map from './Map';\nimport './css/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Map/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}