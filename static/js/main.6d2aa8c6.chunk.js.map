{"version":3,"sources":["map/Cells.js","map/Rivers.js","map/Routes.js","map/Markers.js","json/world/map.map","Map.js","index.js"],"names":["Cells","mode","borders","width","height","useState","geoData","cells","setCells","cellPaths","setCellPaths","useEffect","console","log","projection","geoEquirectangular","fitSize","pathGenerator","geoPath","paths","features","map","f","idx","props","properties","type","colorFill","strokeFill","chroma","require","randomColor","format","seed","state","religion","luminosity","culture","province","biomeColors","biome","domain","scale","hex","population","d","fill","fillOpacity","stroke","strokeWidth","className","id","updateCellPaths","Rivers","riverData","rivers","riverPaths","setRiverPaths","riverSVG","Routes","routeData","routes","routePaths","setroutePaths","routeSVG","geometry","strokeDasharray","Markers","markers","markerPaths","setMarkerPaths","markerSVG","Map","setMode","setBorders","roads","setRoads","setMarkers","mapSVG","useRef","getHeight","h","abs","Math","pow","a","fetch","rawMapData","response","blob","body","fileReader","FileReader","onload","fileLoadedEvent","pack","burg","conf","fl","pop","r","road","s","crossroad","data","target","result","split","JSON","parse","cultures","states","burgs","religions","i","name","provinces","Uint8Array","from","Uint16Array","Float32Array","grid","debug","length","reconstructedCells","cellStruct","biomeNames","urbanPop","round","ruralPop","river","push","readAsText","fetchMapData","createSVG","zoom","d3","on","e","attr","transform","call","ButtonGroup","Button","variant","onClick","ref","el","current","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d2aa8c6.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { geoMercator, geoPath, geoEquirectangular, geoOrthographic } from \"d3-geo\";\r\nimport geoData from \"./../json/world/cells.json\";\r\nimport randomColor from \"randomcolor\";\r\nimport biomeColors from \"./../json/customizables/biomeColors.json\";\r\nexport default function Cells({ mode, borders, width, height}) {\r\n  const [cells, setCells] = useState(geoData);\r\n  const [cellPaths, setCellPaths] = useState([]);\r\n\r\n  const updateCellPaths = () => {\r\n    const projection = geoEquirectangular().fitSize([width,height],geoData)\r\n    const pathGenerator = geoPath(projection);\r\n    var paths = cells.features.map((f, idx) => {\r\n      var props = f.properties;\r\n      if (props.type === \"ocean\" || props.type === \"lake\") {\r\n        var colorFill = \"#D4F1F9\";\r\n        if(borders){\r\n            var strokeFill = \"#000000\";\r\n        }\r\n        else{\r\n            var strokeFill = \"#D4F1F9\"\r\n        }\r\n      } else {\r\n        var colorFill = \"\";\r\n        var chroma = require(\"chroma-js\");\r\n        switch (mode) {\r\n          case \"cells\":\r\n            colorFill = \"#008013\";\r\n            break;\r\n          case \"nations\":\r\n            colorFill = randomColor({ format: \"hsl\", seed: props.state });\r\n            break;\r\n          case \"religion\":\r\n            colorFill = randomColor({ format: \"hsl\", seed: props.religion });\r\n            break;\r\n          case \"culture\":\r\n            colorFill = randomColor({\r\n              format: \"hex\",\r\n              luminosity:\"dark\",\r\n              seed: props.culture*999,\r\n            });\r\n            break;\r\n          case \"province\":\r\n            colorFill = randomColor({\r\n              luminosity: \"dark\",\r\n              seed: props.province * 999,\r\n              format: \"hex\",\r\n            });\r\n            break;\r\n          case \"biomes\":\r\n            colorFill = biomeColors[props.biome];\r\n            break;\r\n          case \"height\":\r\n            var domain = [-1000, 9138];\r\n            var scale = chroma.scale([\"black\", \"white\"]).domain(domain);\r\n            colorFill = scale(props.height).hex();\r\n            break;\r\n          case \"population\":\r\n            var domain = [0, 30000];\r\n            var scale = chroma.scale([\"white\", \"green\"]).domain(domain);\r\n            colorFill = scale(props.population).hex();\r\n            break;\r\n        }\r\n        if (borders) {\r\n          var strokeFill = \"#222222\";\r\n        } else {\r\n          var strokeFill = colorFill;\r\n        }\r\n      }\r\n\r\n      let path = (\r\n        // <a href={\"/cell/\" + props.id}>\r\n          <path\r\n            key={\"path\" + idx}\r\n            d={pathGenerator(f)}\r\n            fill={colorFill}\r\n            fillOpacity=\"1\"\r\n            stroke={strokeFill}\r\n            strokeWidth=\"1\"\r\n            className=\"states\"\r\n            biome={props.biome}\r\n            state={props.state}\r\n            id={props.id}\r\n          />\r\n        ///</a>\r\n      );\r\n      return path;\r\n    });\r\n    setCellPaths(paths);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"cells rendered\");\r\n    setCells(geoData);\r\n    updateCellPaths();\r\n  }, [mode, borders, width, height]);\r\n\r\n  return <g>{cellPaths}</g>;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport riverData from \"./../json/world/rivers.json\";\r\nimport { geoPath, geoMercator, geoEquirectangular } from \"d3-geo\";\r\nimport geoData from './../json/world/cells.json'\r\n\r\nexport default function Rivers({width,height}) {\r\n  const [rivers, setRivers] = useState(riverData);\r\n  const [riverPaths, setRiverPaths] = useState(null);\r\n\r\n  useEffect(() => {\r\n    updateCellPaths();\r\n  }, [width,height]);\r\n\r\n  const updateCellPaths = () => {\r\n    const projection = geoEquirectangular().fitSize([width,height],geoData)\r\n    const pathGenerator = geoPath(projection);\r\n    console.log();\r\n    var riverSVG = rivers.features.map((f, idx) => {\r\n      //console.log(f);\r\n      let path = (\r\n        <path\r\n          key={\"path\" + idx}\r\n          d={pathGenerator(f)}\r\n          stroke={\"#D4F1F9\"}\r\n          strokeWidth={\"1\"}\r\n          fillOpacity={\"0\"}\r\n        />\r\n      );\r\n      return path;\r\n    });\r\n\r\n    setRiverPaths(riverSVG);\r\n  };\r\n\r\n  return <g>{riverPaths}</g>;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport routeData from \"./../json/world/routes.json\";\r\nimport geoData from \"./../json/world/cells.json\";\r\nimport {\r\n  geoPath,\r\n  geoMercator,\r\n  geoEquirectangular\r\n} from \"d3-geo\";\r\n\r\nexport default function Routes({ width, height }) {\r\n  const [routes, setroutes] = useState(routeData);\r\n  const [routePaths, setroutePaths] = useState(null);\r\n\r\n  useEffect(() => {\r\n    updateCellPaths();\r\n  }, [width,height]);\r\n\r\n  const updateCellPaths = () => {\r\n    const projection = geoEquirectangular().fitSize([width,height],geoData)\r\n    const pathGenerator = geoPath(projection);\r\n\r\n    var routeSVG = routes.features.map((f, idx) => {\r\n      if (\r\n        f.properties.type == \"roads\" ||\r\n        f.properties.type == \"trails\" ||\r\n        f.properties.type == \"searoutes\"\r\n      ) {\r\n        let path = (\r\n          <path\r\n            key={\"path\" + idx}\r\n            d={pathGenerator(f.geometry)}\r\n            stroke={f.properties.type == \"searoutes\" ? \"#4994aa\" : \"#592d00\"}\r\n            strokeWidth={f.properties.type == \"roads\" ? \"0.2%\" : \"0.1%\"}\r\n            strokeDasharray={f.properties.type == \"roads\" ? \"\" : \"4 1\"}\r\n            fillOpacity={\"0\"}\r\n          />\r\n        );\r\n        return path;\r\n      }\r\n    });\r\n\r\n    setroutePaths(routeSVG);\r\n  };\r\n\r\n  return <g>{routePaths}</g>;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport riverData from \"./../json/world/markers.json\";\r\nimport { geoPath, geoMercator, geoEquirectangular } from \"d3-geo\";\r\nimport geoData from './../json/world/cells.json'\r\n\r\nexport default function Markers({ width, height}) {\r\n  const [markers, setMarkers] = useState(riverData);\r\n  const [markerPaths, setMarkerPaths] = useState(null);\r\n\r\n  useEffect(() => {\r\n    updateCellPaths();\r\n  }, [width,height]);\r\n\r\n  const updateCellPaths = () => {\r\n    const projection = geoEquirectangular().fitSize([width,height],geoData)\r\n    const pathGenerator = geoPath(projection);\r\n    console.log();\r\n    var markerSVG = markers.features.map((f, idx) => {\r\n      //console.log(f);\r\n      let path = (\r\n        <path\r\n          key={\"path\" + idx}\r\n          d={pathGenerator(f)}\r\n          stroke={\"#000000\"}\r\n          fill={\"#000000\"}\r\n          strokeWidth={\"1\"}\r\n          fillOpacity={\"1\"}\r\n        />\r\n      );\r\n      return path;\r\n    });\r\n\r\n    setMarkerPaths(markerSVG);\r\n  };\r\n\r\n  return <g>{markerPaths}</g>;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/map.65aaf198.map\";","import React, { useEffect, useState, useRef } from \"react\";\r\nimport Cells from \"./map/Cells\";\r\nimport Rivers from \"./map/Rivers\";\r\nimport Routes from \"./map/Routes\";\r\nimport Markers from \"./map/Markers\";\r\nimport rawMapData from './json/world/map.map';\r\nimport biomeNames from './json/customizables/biomeNames.json';\r\nimport { Button, ButtonGroup } from \"react-bootstrap\";\r\nimport * as d3 from \"d3\";\r\n\r\nexport default function Map(props) {\r\n  const [mode, setMode] = useState(\"cells\");\r\n  const [borders, setBorders] = useState(false);\r\n  const [roads, setRoads] = useState(false);\r\n\r\n  const [width, setWidth] = useState(1920);\r\n  const [height, setHeight] = useState(1080);\r\n\r\n  const [markers, setMarkers] = useState(false);\r\n\r\n  const mapSVG = useRef();\r\n\r\n  function getHeight(h, abs) {\r\n    let unitRatio = 3.281; // default calculations are in feet\r\n    let height = -990;\r\n    if (h >= 20) height = Math.pow(h - 18, +1.8);\r\n    else if (h < 20 && h > 0) height = ((h - 20) / h) * 50;\r\n  \r\n    if (abs) height = Math.abs(height);\r\n    return height*unitRatio;\r\n  }\r\n  \r\n  useEffect(() => {\r\n    async function fetchMapData(){\r\n\r\n      var response = await fetch(rawMapData)\r\n      var body = await response.blob();\r\n      let fileReader = new FileReader();\r\n      fileReader.onload = function (fileLoadedEvent){\r\n        var pack = {cells:{biome:\"\",burg:\"\",conf:\"\",culture:\"\",fl:\"\",pop:\"\",r:\"\",road:\"\",s:\"\",state:\"\",religion:\"\",province:\"\",crossroad:\"\"}}\r\n\r\n        const dataLoaded = fileLoadedEvent.target.result;\r\n        const data = dataLoaded.split(\"\\r\");\r\n        //console.debug(JSON.parse(data[6]))\r\n\r\n        pack.features = JSON.parse(data[12]);\r\n        pack.cultures = JSON.parse(data[13]);\r\n        pack.states = JSON.parse(data[14]);\r\n        pack.burgs = JSON.parse(data[15]);\r\n        pack.religions = data[29] ? JSON.parse(data[29]) : [{i: 0, name: \"No religion\"}];\r\n        pack.provinces = data[30] ? JSON.parse(data[30]) : [0];\r\n        pack.rivers = data[32] ? JSON.parse(data[32]) : [];\r\n  \r\n        var cells = pack.cells;\r\n        cells.biome = Uint8Array.from(data[16].split(\",\"));\r\n        cells.burg = Uint16Array.from(data[17].split(\",\"));\r\n        cells.conf = Uint8Array.from(data[18].split(\",\"));\r\n        cells.culture = Uint16Array.from(data[19].split(\",\"));\r\n        cells.fl = Uint16Array.from(data[20].split(\",\"));\r\n        cells.pop = Float32Array.from(data[21].split(\",\"));\r\n        cells.r = Uint16Array.from(data[22].split(\",\"));\r\n        cells.road = Uint16Array.from(data[23].split(\",\"));\r\n        cells.s = Uint16Array.from(data[24].split(\",\"));\r\n\r\n        var grid = JSON.parse(data[6]);\r\n        // grid.cells.h = Uint8Array.from(data[7].split(\",\"));\r\n        console.debug(grid);\r\n\r\n\r\n        cells.state = Uint16Array.from(data[25].split(\",\"));\r\n        cells.religion = data[26] ? Uint16Array.from(data[26].split(\",\")) : new Uint16Array(cells.i.length);\r\n        cells.province = data[27] ? Uint16Array.from(data[27].split(\",\")) : new Uint16Array(cells.i.length);\r\n        cells.crossroad = data[28] ? Uint16Array.from(data[28].split(\",\")) : new Uint16Array(cells.i.length);\r\n        console.debug(cells.i)\r\n        \r\n        console.debug(pack);\r\n        var reconstructedCells = [];\r\n        for(let i=0;i<cells.biome.length;i++){\r\n          const cells = pack.cells\r\n          var cellStruct = {\r\n            id:i,\r\n            biome:biomeNames[cells.biome[i]],\r\n            burg:cells.burg[i],\r\n            conf:cells.conf[i],\r\n            culture:cells.culture[i],\r\n            fl:cells.fl[i],\r\n            urbanPop:Math.round(cells.burg[i] ? pack.burgs[cells.burg[i]].population * 1000 * 1 : 0),\r\n            ruralPop:Math.round(cells.pop[i] * 1000),\r\n            river:cells.r[i] ? true : false,\r\n            road:cells.road[i] != 0 ? true : false,\r\n            state:cells.state[i],\r\n            culture:cells.culture[i],\r\n            province:cells.province[i],  \r\n            religion:cells.religion[i],\r\n            height: getHeight(cells.h[i])\r\n          }\r\n          reconstructedCells.push(cellStruct);\r\n        }    \r\n        console.debug(reconstructedCells);\r\n  \r\n      }\r\n      fileReader.readAsText(body,\"UTF-8\");\r\n    }\r\n    fetchMapData();\r\n\r\n\r\n    createSVG();\r\n  }, [width, height]);\r\n\r\n  // const handleResize = () => {\r\n  //   let height = mapSVG.current.parentNode.clientHeight*1.2;\r\n  //   setHeight(height);\r\n  //   let width = mapSVG.current.parentNode.clientWidth*1.2;\r\n  //   setWidth(width);\r\n  // };\r\n\r\n  const createSVG = () => {\r\n    const handleZoom = (e) =>{\r\n      d3.select(\"svg g\")\r\n        .attr('transform',e.transform);\r\n    }\r\n    let zoom = d3.zoom().on('zoom', handleZoom)\r\n\r\n    d3.select(\"#map\").call(zoom);\r\n  };\r\n\r\n  return (\r\n    <div className=\"map\">\r\n      <div className=\"buttons\">\r\n        <ButtonGroup>\r\n          <Button variant=\"secondary\" onClick={() => setMode(\"cells\")}>\r\n            Cells\r\n          </Button>\r\n          <Button variant=\"secondary\" onClick={() => setMode(\"nations\")}>\r\n            nations\r\n          </Button>\r\n          <Button variant=\"secondary\" onClick={() => setMode(\"religion\")}>\r\n            religion\r\n          </Button>\r\n          <Button variant=\"secondary\" onClick={() => setMode(\"culture\")}>\r\n            culture\r\n          </Button>\r\n          <Button variant=\"secondary\" onClick={() => setMode(\"province\")}>\r\n            province\r\n          </Button>\r\n          <Button variant=\"secondary\" onClick={() => setMode(\"biomes\")}>\r\n            biomes\r\n          </Button>\r\n          <Button variant=\"secondary\" onClick={() => setMode(\"height\")}>\r\n            height\r\n          </Button>\r\n          <Button variant=\"secondary\" onClick={() => setMode(\"population\")}>\r\n            population\r\n          </Button>\r\n          <Button variant=\"secondary\" onClick={() => setBorders(true)}>\r\n            borders on\r\n          </Button>\r\n          <Button variant=\"secondary\" onClick={() => setBorders(false)}>\r\n            borders off\r\n          </Button>\r\n        </ButtonGroup>\r\n        <br />\r\n        <ButtonGroup>\r\n          <Button onClick={() => setRoads(true)}>roads on</Button>\r\n          <Button onClick={() => setRoads(false)}>roads off</Button>\r\n          <Button onClick={() => setMarkers(true)}>markers on</Button>\r\n          <Button onClick={() => setMarkers(false)}>markers off</Button>\r\n        </ButtonGroup>\r\n      </div>\r\n          <svg\r\n            width={\"100%\"} height={\"100%\"}\r\n            id=\"map\"\r\n            ref={(el) => {\r\n              mapSVG.current = el;\r\n            }}\r\n          >\r\n            <g>\r\n            <Cells \r\n              id=\"cells\"\r\n              mode={mode}\r\n              borders={borders}\r\n              width={width}\r\n              height={height}\r\n            />\r\n            <Rivers width={width} height={height} />\r\n            {roads ? <Routes width={width} height={height} /> : <></>}\r\n            {markers ? <Markers width={width} height={height} /> : <></>}\r\n            </g>\r\n          </svg>\r\n          \r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Map from './Map';\r\nimport './css/index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Map/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}