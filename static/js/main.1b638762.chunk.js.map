{"version":3,"sources":["map/Cells.js","map/Rivers.js","map/Routes.js","map/Markers.js","json/world/map.map","Map.js","index.js"],"names":["Cells","mode","borders","width","height","useState","geoData","cells","setCells","cellPaths","setCellPaths","useEffect","console","log","projection","geoEquirectangular","fitSize","pathGenerator","geoPath","paths","features","map","f","idx","props","properties","type","colorFill","strokeFill","chroma","require","randomColor","format","seed","state","religion","hue","culture","luminosity","province","alpha","biomeColors","biome","domain","scale","hex","population","d","fill","fillOpacity","stroke","strokeWidth","className","updateCellPaths","Rivers","riverData","rivers","riverPaths","setRiverPaths","riverSVG","Routes","routeData","routes","routePaths","setroutePaths","routeSVG","geometry","strokeDasharray","Markers","markers","markerPaths","setMarkerPaths","markerSVG","Map","setMode","setBorders","roads","setRoads","setWidth","setHeight","setMarkers","mapSVG","useRef","handleResize","window","addEventListener","current","parentNode","clientHeight","clientWidth","ButtonGroup","Button","variant","onClick","ref","el","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gvy4MAKe,SAASA,EAAT,GAAiD,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,OACpD,EAA0BC,mBAASC,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAkCH,mBAAS,IAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KAsFA,OANAC,qBAAU,WACRC,QAAQC,IAAI,kBACZL,EAASF,GAhFa,WACtB,IAAMQ,EAAaC,cAAqBC,QAAQ,CAACb,EAAMC,GAAQE,GACzDW,EAAgBC,YAAQJ,GAC1BK,EAAQZ,EAAMa,SAASC,KAAI,SAACC,EAAGC,GACjC,IAAIC,EAAQF,EAAEG,WACd,GAAmB,UAAfD,EAAME,MAAmC,SAAfF,EAAME,KAClC,IAAIC,EAAY,UACZC,EAAa,cACZ,CACDD,EAAY,GAAhB,IACIE,EAASC,EAAQ,IACrB,OAAQ7B,GACN,IAAK,QACH0B,EAAY,UACZ,MACF,IAAK,UACHA,EAAYI,IAAY,CAAEC,OAAQ,MAAOC,KAAMT,EAAMU,QACrD,MACF,IAAK,WACHP,EAAYI,IAAY,CAAEC,OAAQ,MAAOC,KAAMT,EAAMW,WACrD,MACF,IAAK,UACHR,EAAYI,IAAY,CACtBK,IAAK,MACLJ,OAAQ,MACRC,KAAMT,EAAMa,UAEd,MACF,IAAK,WACHV,EAAYI,IAAY,aACtBC,OAAQ,MACRM,WAAY,OACZL,KAAuB,GAAjBT,EAAMe,SACZC,MAAO,KAJc,SAKb,SAEV,MACF,IAAK,SACHb,EAAYc,EAAYjB,EAAMkB,OAC9B,MACF,IAAK,SACH,IAAIC,EAAS,EAAE,IAAK,KAEpBhB,EADYE,EAAOe,MAAM,CAAC,QAAS,UAAUD,OAAOA,EACxCC,CAAMpB,EAAMpB,QAAQyC,MAChC,MACF,IAAK,aACCF,EAAS,CAAC,EAAG,KAEjBhB,EADYE,EAAOe,MAAM,CAAC,QAAS,UAAUD,OAAOA,EACxCC,CAAMpB,EAAMsB,YAAYD,MAIlCjB,EADF1B,EACe,UAEAyB,EAmBrB,OAbI,sBAEEoB,EAAG9B,EAAcK,GACjB0B,KAAMrB,EACNsB,YAAY,IACZC,OAAQtB,EACRuB,YAAY,IACZC,UAAU,SACVV,MAAOlB,EAAMkB,MACbR,MAAOV,EAAMU,OARR,OAASX,MActBb,EAAaS,GAMbkC,KACC,CAACpD,EAAMC,EAASC,EAAOC,IAEnB,4BAAIK,I,YCxFE,SAAS6C,EAAT,GAAiC,IAAhBnD,EAAe,EAAfA,MAAMC,EAAS,EAATA,OACpC,EAA4BC,mBAASkD,GAArC,mBAAOC,EAAP,KACA,GADA,KACoCnD,mBAAS,OAA7C,mBAAOoD,EAAP,KAAmBC,EAAnB,KAEA/C,qBAAU,WACR0C,MACC,CAAClD,EAAMC,IAEV,IAAMiD,EAAkB,WACtB,IAAMvC,EAAaC,cAAqBC,QAAQ,CAACb,EAAMC,GAAQE,GACzDW,EAAgBC,YAAQJ,GAC9BF,QAAQC,MACR,IAAI8C,EAAWH,EAAOpC,SAASC,KAAI,SAACC,EAAGC,GAWrC,OARE,sBAEEwB,EAAG9B,EAAcK,GACjB4B,OAAQ,UACRC,YAAa,IACbF,YAAa,KAJR,OAAS1B,MAUpBmC,EAAcC,IAGhB,OAAO,4BAAIF,I,YCzBE,SAASG,EAAT,GAAoC,IAAlBzD,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OACtC,EAA4BC,mBAASwD,GAArC,mBAAOC,EAAP,KACA,GADA,KACoCzD,mBAAS,OAA7C,mBAAO0D,EAAP,KAAmBC,EAAnB,KAEArD,qBAAU,WACR0C,MACC,CAAClD,EAAMC,IAEV,IAAMiD,EAAkB,WACtB,IAAMvC,EAAaC,cAAqBC,QAAQ,CAACb,EAAMC,GAAQE,GACzDW,EAAgBC,YAAQJ,GAE1BmD,EAAWH,EAAO1C,SAASC,KAAI,SAACC,EAAGC,GACrC,GACuB,SAArBD,EAAEG,WAAWC,MACQ,UAArBJ,EAAEG,WAAWC,MACQ,aAArBJ,EAAEG,WAAWC,KAYb,OATE,sBAEEqB,EAAG9B,EAAcK,EAAE4C,UACnBhB,OAA6B,aAArB5B,EAAEG,WAAWC,KAAsB,UAAY,UACvDyB,YAAkC,SAArB7B,EAAEG,WAAWC,KAAkB,IAAM,MAClDyC,gBAAsC,SAArB7C,EAAEG,WAAWC,KAAkB,GAAK,MACrDuB,YAAa,KALR,OAAS1B,MAYtByC,EAAcC,IAGhB,OAAO,4BAAIF,I,YCvCE,SAASK,EAAT,GAAoC,IAAjBjE,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,OACvC,EAA8BC,mBAASkD,GAAvC,mBAAOc,EAAP,KACA,GADA,KACsChE,mBAAS,OAA/C,mBAAOiE,EAAP,KAAoBC,EAApB,KAEA5D,qBAAU,WACR0C,MACC,CAAClD,EAAMC,IAEV,IAAMiD,EAAkB,WACtB,IAAMvC,EAAaC,cAAqBC,QAAQ,CAACb,EAAMC,GAAQE,GACzDW,EAAgBC,YAAQJ,GAC9BF,QAAQC,MACR,IAAI2D,EAAYH,EAAQjD,SAASC,KAAI,SAACC,EAAGC,GAYvC,OATE,sBAEEwB,EAAG9B,EAAcK,GACjB4B,OAAQ,UACRF,KAAM,UACNG,YAAa,IACbF,YAAa,KALR,OAAS1B,MAWpBgD,EAAeC,IAGjB,OAAO,4BAAIF,ICnCE,Q,wBCcA,SAASG,EAAIjD,GAC1B,MAAwBnB,mBAAS,SAAjC,mBAAOJ,EAAP,KAAayE,EAAb,KACA,EAA8BrE,oBAAS,GAAvC,mBAAOH,EAAP,KAAgByE,EAAhB,KACA,EAA0BtE,oBAAS,GAAnC,mBAAOuE,EAAP,KAAcC,EAAd,KAEA,EAA0BxE,mBAAS,MAAnC,mBAAOF,EAAP,KAAc2E,EAAd,KACA,EAA4BzE,mBAAS,MAArC,mBAAOD,EAAP,KAAe2E,EAAf,KAEA,EAA8B1E,oBAAS,GAAvC,mBAAOgE,EAAP,KAAgBW,EAAhB,KAEMC,EAASC,mBAEfvE,qBAAU,WAmBRwE,IAEAC,OAAOC,iBAAiB,OAAQF,GAChCC,OAAOC,iBAAiB,SAAUF,KACjC,CAAChF,EAAOC,IAEX,IAAM+E,EAAe,WACnB,IAAI/E,EAAS6E,EAAOK,QAAQC,WAAWC,aACvCT,EAAU3E,GACV,IAAID,EAAQ8E,EAAOK,QAAQC,WAAWE,YACtCX,EAAS3E,IAGX,OACE,qBAAKiD,UAAU,MAAf,SACE,eAAC,IAAD,WACE,sBAAKA,UAAU,UAAf,UACE,eAACsC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAMnB,EAAQ,UAAnD,mBAGA,cAACiB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAMnB,EAAQ,YAAnD,qBAGA,cAACiB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAMnB,EAAQ,aAAnD,sBAGA,cAACiB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAMnB,EAAQ,YAAnD,qBAGA,cAACiB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAMnB,EAAQ,aAAnD,sBAGA,cAACiB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAMnB,EAAQ,WAAnD,oBAGA,cAACiB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAMnB,EAAQ,WAAnD,oBAGA,cAACiB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAMnB,EAAQ,eAAnD,wBAGA,cAACiB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAMlB,GAAW,IAAtD,wBAGA,cAACgB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAMlB,GAAW,IAAtD,4BAIF,uBACA,eAACe,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQE,QAAS,kBAAMhB,GAAS,IAAhC,sBACA,cAACc,EAAA,EAAD,CAAQE,QAAS,kBAAMhB,GAAS,IAAhC,uBACA,cAACc,EAAA,EAAD,CAAQE,QAAS,kBAAMb,GAAW,IAAlC,wBACA,cAACW,EAAA,EAAD,CAAQE,QAAS,kBAAMb,GAAW,IAAlC,+BAGJ,cAAC,IAAD,UACE,sBACE7E,MAAO,OACPC,OAAQ,OACR0F,IAAK,SAACC,GACJd,EAAOK,QAAUS,GAJrB,UAOE,cAAC/F,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,MAAOA,EACPC,OAAQA,IAEV,cAACkD,EAAD,CAAQnD,MAAOA,EAAOC,OAAQA,IAC7BwE,EAAQ,cAAChB,EAAD,CAAQzD,MAAOA,EAAOC,OAAQA,IAAa,6BACnDiE,EAAU,cAACD,EAAD,CAASjE,MAAOA,EAAOC,OAAQA,IAAa,uC,MCjHnE4F,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACzB,EAAD,MAEF0B,SAASC,eAAe,U","file":"static/js/main.1b638762.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { geoMercator, geoPath, geoEquirectangular } from \"d3-geo\";\r\nimport geoData from \"../json/world/cells.json\";\r\nimport randomColor from \"randomcolor\";\r\nimport biomeColors from \"../json/customizables/biomeColors.json\";\r\nexport default function Cells({ mode, borders, width, height}) {\r\n  const [cells, setCells] = useState(geoData);\r\n  const [cellPaths, setCellPaths] = useState([]);\r\n\r\n  const updateCellPaths = () => {\r\n    const projection = geoEquirectangular().fitSize([width,height],geoData)\r\n    const pathGenerator = geoPath(projection);\r\n    var paths = cells.features.map((f, idx) => {\r\n      var props = f.properties;\r\n      if (props.type === \"ocean\" || props.type === \"lake\") {\r\n        var colorFill = \"#D4F1F9\";\r\n        var strokeFill = \"#D4F1F9\";\r\n      } else {\r\n        var colorFill = \"\";\r\n        var chroma = require(\"chroma-js\");\r\n        switch (mode) {\r\n          case \"cells\":\r\n            colorFill = \"#008013\";\r\n            break;\r\n          case \"nations\":\r\n            colorFill = randomColor({ format: \"hsl\", seed: props.state });\r\n            break;\r\n          case \"religion\":\r\n            colorFill = randomColor({ format: \"hsl\", seed: props.religion });\r\n            break;\r\n          case \"culture\":\r\n            colorFill = randomColor({\r\n              hue: \"red\",\r\n              format: \"hsl\",\r\n              seed: props.culture,\r\n            });\r\n            break;\r\n          case \"province\":\r\n            colorFill = randomColor({\r\n              format: \"hsl\",\r\n              luminosity: \"dark\",\r\n              seed: props.province * 10,\r\n              alpha: 0.99,\r\n              format: \"rgba\",\r\n            });\r\n            break;\r\n          case \"biomes\":\r\n            colorFill = biomeColors[props.biome];\r\n            break;\r\n          case \"height\":\r\n            var domain = [-200, 7000];\r\n            var scale = chroma.scale([\"black\", \"white\"]).domain(domain);\r\n            colorFill = scale(props.height).hex();\r\n            break;\r\n          case \"population\":\r\n            var domain = [0, 30000];\r\n            var scale = chroma.scale([\"white\", \"green\"]).domain(domain);\r\n            colorFill = scale(props.population).hex();\r\n            break;\r\n        }\r\n        if (borders) {\r\n          var strokeFill = \"#222222\";\r\n        } else {\r\n          var strokeFill = colorFill;\r\n        }\r\n      }\r\n\r\n      let path = (\r\n        // <a href={\"/cell/\" + props.id}>\r\n          <path\r\n            key={\"path\" + idx}\r\n            d={pathGenerator(f)}\r\n            fill={colorFill}\r\n            fillOpacity=\"1\"\r\n            stroke={strokeFill}\r\n            strokeWidth=\"1\"\r\n            className=\"states\"\r\n            biome={props.biome}\r\n            state={props.state}\r\n          />\r\n        ///</a>\r\n      );\r\n      return path;\r\n    });\r\n    setCellPaths(paths);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"cells rendered\");\r\n    setCells(geoData);\r\n    updateCellPaths();\r\n  }, [mode, borders, width, height]);\r\n\r\n  return <g>{cellPaths}</g>;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport riverData from \"../json/world/rivers.json\";\r\nimport { geoPath, geoMercator, geoEquirectangular } from \"d3-geo\";\r\nimport geoData from '../json/world/cells.json'\r\n\r\nexport default function Rivers({width,height}) {\r\n  const [rivers, setRivers] = useState(riverData);\r\n  const [riverPaths, setRiverPaths] = useState(null);\r\n\r\n  useEffect(() => {\r\n    updateCellPaths();\r\n  }, [width,height]);\r\n\r\n  const updateCellPaths = () => {\r\n    const projection = geoEquirectangular().fitSize([width,height],geoData)\r\n    const pathGenerator = geoPath(projection);\r\n    console.log();\r\n    var riverSVG = rivers.features.map((f, idx) => {\r\n      //console.log(f);\r\n      let path = (\r\n        <path\r\n          key={\"path\" + idx}\r\n          d={pathGenerator(f)}\r\n          stroke={\"#D4F1F9\"}\r\n          strokeWidth={\"1\"}\r\n          fillOpacity={\"0\"}\r\n        />\r\n      );\r\n      return path;\r\n    });\r\n\r\n    setRiverPaths(riverSVG);\r\n  };\r\n\r\n  return <g>{riverPaths}</g>;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport routeData from \"../json/world/routes.json\";\r\nimport geoData from \"../json/world/cells.json\";\r\nimport {\r\n  geoPath,\r\n  geoMercator,\r\n  geoEquirectangular\r\n} from \"d3-geo\";\r\n\r\nexport default function Routes({ width, height }) {\r\n  const [routes, setroutes] = useState(routeData);\r\n  const [routePaths, setroutePaths] = useState(null);\r\n\r\n  useEffect(() => {\r\n    updateCellPaths();\r\n  }, [width,height]);\r\n\r\n  const updateCellPaths = () => {\r\n    const projection = geoEquirectangular().fitSize([width,height],geoData)\r\n    const pathGenerator = geoPath(projection);\r\n\r\n    var routeSVG = routes.features.map((f, idx) => {\r\n      if (\r\n        f.properties.type == \"roads\" ||\r\n        f.properties.type == \"trails\" ||\r\n        f.properties.type == \"searoutes\"\r\n      ) {\r\n        let path = (\r\n          <path\r\n            key={\"path\" + idx}\r\n            d={pathGenerator(f.geometry)}\r\n            stroke={f.properties.type == \"searoutes\" ? \"#4994aa\" : \"#592d00\"}\r\n            strokeWidth={f.properties.type == \"roads\" ? \"2\" : \"0.9\"}\r\n            strokeDasharray={f.properties.type == \"roads\" ? \"\" : \"4 1\"}\r\n            fillOpacity={\"0\"}\r\n          />\r\n        );\r\n        return path;\r\n      }\r\n    });\r\n\r\n    setroutePaths(routeSVG);\r\n  };\r\n\r\n  return <g>{routePaths}</g>;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport riverData from \"../json/world/markers.json\";\r\nimport { geoPath, geoMercator, geoEquirectangular } from \"d3-geo\";\r\nimport geoData from '../json/world/cells.json'\r\n\r\nexport default function Markers({ width, height}) {\r\n  const [markers, setMarkers] = useState(riverData);\r\n  const [markerPaths, setMarkerPaths] = useState(null);\r\n\r\n  useEffect(() => {\r\n    updateCellPaths();\r\n  }, [width,height]);\r\n\r\n  const updateCellPaths = () => {\r\n    const projection = geoEquirectangular().fitSize([width,height],geoData)\r\n    const pathGenerator = geoPath(projection);\r\n    console.log();\r\n    var markerSVG = markers.features.map((f, idx) => {\r\n      //console.log(f);\r\n      let path = (\r\n        <path\r\n          key={\"path\" + idx}\r\n          d={pathGenerator(f)}\r\n          stroke={\"#000000\"}\r\n          fill={\"#000000\"}\r\n          strokeWidth={\"1\"}\r\n          fillOpacity={\"1\"}\r\n        />\r\n      );\r\n      return path;\r\n    });\r\n\r\n    setMarkerPaths(markerSVG);\r\n  };\r\n\r\n  return <g>{markerPaths}</g>;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/map.7c7382e8.map\";","import React, { useEffect, useState, useRef } from \"react\";\r\nimport Cells from \"./map/Cells\";\r\nimport Rivers from \"./map/Rivers\";\r\nimport Routes from \"./map/Routes\";\r\nimport Markers from \"./map/Markers\";\r\nimport { geoMercator, geoEquirectangular, geoIdentity } from \"d3-geo\";\r\nimport rawMapData from \"./json/world/map.map\";\r\nimport geoData from \"./json/world/cells.json\";\r\nimport { Button, ButtonGroup } from \"react-bootstrap\";\r\nimport {\r\n  TransformComponent as TransformComponent,\r\n  TransformWrapper,\r\n} from \"react-zoom-pan-pinch\";\r\n\r\nexport default function Map(props) {\r\n  const [mode, setMode] = useState(\"cells\");\r\n  const [borders, setBorders] = useState(false);\r\n  const [roads, setRoads] = useState(false);\r\n\r\n  const [width, setWidth] = useState(1920);\r\n  const [height, setHeight] = useState(1080);\r\n\r\n  const [markers, setMarkers] = useState(false);\r\n\r\n  const mapSVG = useRef();\r\n\r\n  useEffect(() => {\r\n    // async function fetchMapData(){\r\n    //   var response = await fetch(rawMapData)\r\n    //   var body = await response.blob();\r\n    //   let fileReader = new FileReader();\r\n    //   fileReader.onload = function (fileLoadedEvent){\r\n    //     const dataLoaded = fileLoadedEvent.target.result;\r\n    //     const data = dataLoaded.split(\"\\r\\n\");\r\n    //     //console.debug(data)\r\n\r\n    //     const provinces = JSON.parse(data[30])\r\n    //     const religions = JSON.parse(data[29])\r\n    //     const burgs = JSON.parse(data[15])\r\n    //     const states = JSON.parse(data[14])\r\n    //     console.debug(states);\r\n    //   }\r\n    //   fileReader.readAsText(body,\"UTF-8\");\r\n    // }\r\n    // fetchMapData();\r\n    handleResize();\r\n\r\n    window.addEventListener(\"load\", handleResize);\r\n    window.addEventListener(\"resize\", handleResize);\r\n  }, [width, height]);\r\n\r\n  const handleResize = () => {\r\n    let height = mapSVG.current.parentNode.clientHeight;\r\n    setHeight(height);\r\n    let width = mapSVG.current.parentNode.clientWidth;\r\n    setWidth(width);\r\n  };\r\n\r\n  return (\r\n    <div className=\"map\">\r\n      <TransformWrapper>\r\n        <div className=\"buttons\">\r\n          <ButtonGroup>\r\n            <Button variant=\"secondary\" onClick={() => setMode(\"cells\")}>\r\n              Cells\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={() => setMode(\"nations\")}>\r\n              nations\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={() => setMode(\"religion\")}>\r\n              religion\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={() => setMode(\"culture\")}>\r\n              culture\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={() => setMode(\"province\")}>\r\n              province\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={() => setMode(\"biomes\")}>\r\n              biomes\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={() => setMode(\"height\")}>\r\n              height\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={() => setMode(\"population\")}>\r\n              population\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={() => setBorders(true)}>\r\n              borders on\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={() => setBorders(false)}>\r\n              borders off\r\n            </Button>\r\n          </ButtonGroup>\r\n          <br />\r\n          <ButtonGroup>\r\n            <Button onClick={() => setRoads(true)}>roads on</Button>\r\n            <Button onClick={() => setRoads(false)}>roads off</Button>\r\n            <Button onClick={() => setMarkers(true)}>markers on</Button>\r\n            <Button onClick={() => setMarkers(false)}>markers off</Button>\r\n          </ButtonGroup>\r\n        </div>\r\n        <TransformComponent>\r\n          <svg\r\n            width={\"100%\"}\r\n            height={\"100%\"}\r\n            ref={(el) => {\r\n              mapSVG.current = el;\r\n            }}\r\n          >\r\n            <Cells\r\n              mode={mode}\r\n              borders={borders}\r\n              width={width}\r\n              height={height}\r\n            />\r\n            <Rivers width={width} height={height} />\r\n            {roads ? <Routes width={width} height={height} /> : <></>}\r\n            {markers ? <Markers width={width} height={height} /> : <></>}\r\n          </svg>\r\n        </TransformComponent>\r\n      </TransformWrapper>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Map from './Map';\nimport './css/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Map/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}